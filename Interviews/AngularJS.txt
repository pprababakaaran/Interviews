AngularJS - JS framework for Single Page Application(SPA). It extends HTML DOM with additional attributes.
SPA, Two-Way Binding
Directives:
- AngularJS extends HTML attributes with directives. Ex. ng-app, ng-model, ng-bind, ng-show

ng-app - defines angularjs html application.
ng-model - binds the value of HTML controls(textfield, dropdown) to application data.
ng-bind - binds application data to HTML view.
ng-init - calls method or initiate object during controller/application called.

app.directive('ngFileModel', [ '$parse', function($parse) {	return { restrict : 'A' }]);

Default Level: EA

restriction level: 
E- Element Name Ex. <ngFileModel><ngFileModel>
A - Attribute Level Ex.<div ngFileModel></div>
C - for Class Ex.<div class="ngFileModel"></div>
M - for Comment Ex.<!-- directive: w3-test-directive -->


data-ng-app vs ng-app - There is no difference between this two. data-ng makes valid HTML. data-ng - HTML validator.

Expression 
- expressions are written inside double braces or inside ng-bind. Ex. {{expression}}. ng-bind="expression"
<div ng-app="">
  <p>Name: <input type="text" ng-model="name"></p>
  <p>{{name}}</p>
   <p ng-bind="name"></p>
</div>

Modules 
- The module is a container for services, controllers, filters, directives and configuration etc. angular.module is used to configure the $injector.  
var app = angular.module('myApp', []);

Two way Binding:
The bindings goes both ways. If the user changes the value inside the input field, application data also changes.
 - Change to view updates the model
 - Change to model updates the view
 - Directives are registered with watcher.
 - AngularJS digest cycle($scope.$digest()) iterates all scope object to be watched. Checks if scope.variable object got changed, it uses $scope.apply() to apply changes on scope.vaiable object.
 - Two way binding will be slow. Use one way bidning(::$scope.varibale) where two way binding is not requried.

 $scope.watch(attribute, function(newValue, oldValue) {}) - Bootstrap switch
 $scope.watch - Listener to handle data change. - Timeout, UI, complex asynchronous call.
 $scope.watcher will have value of array to be watched.
 
 $scope.apply(function() {}) - Indirectly it calls the $scope.digest(). Helps to apply the model value in view.

 $scope.digest - processes all the watchExpression for the current scope and its children. Current watchExpression compared with previous watchExpression. If doesnot match, listener is fired.
 dirty checking - comparing current watchExpression with previous watchExpression. If doesnot matches,its called dirty checking.
 
 Controllers:
	Completely seperated from view and focus on model.
	app.controller('personCtrl', function($scope) {};
	
Scope:
Scope is binding object between view(HTML) and controller. Scope is javascript object with properties and methods. 
$rootScope - Available at application level. $scope cannot be used outside the controller in which it is defined whereas a property assigned with $rootScope can be used anywhere.
$scope - Available at controller and assocaited view.
$isolated Scope - Local scope inside direcvtives. when you write your custom element directives, to read name and value from your id it helps.
Ex. <my-directive name="{{myValues}}"></my-directive>

	app.directive('my-directive', function () {
    return {
        scope: {name :'@'},
        template: 'FirstName: {{myValues.firstname}} LastName: {{myValues.lastname}}'
    };
});

Filters:
Transfroms the data. Ex. sort, character change, filter
Ex. app.filter('firstCharacter', function() {};
 <p>The name is {{ lastName | firstCharacter }}</p>
 
Services: Ex. $location, $http
	you can use services to organize and share code across your app.
	To use an angularjs services, you add it as a dependency for the component(controller, filter, service or directives).

	AngularJS services are:
	 - Lazily instantiated – AngularJS only instantiates a service when an application component depends on it.
     - Singletons – Each component dependent on a service gets a reference to the single instance generated by the service factory.
	
	Ex:
	var app = angular.module('myApp', []);
	app.controller('myCtrl', function($scope, $http) {
		$http.get("welcome.htm").then(function (response) {
			$scope.myWelcome = response.data;
		});
	});
	
Service vs Factory
When you inject service to controllers/service, it intersn converts into new FunctionYouPassedToController().
Service is just function for the business layer of the application. It acts as constructor function and called with new and you can add public methods to it.
Use a service when you want to just create things that act as public APIS. Accessible to all the controllers. Ex. getEmails(), getHolidays()

Factory is just function and returns a value. uses factory design pattern to create objects. Ask for object and it creates.

Config:
Use config to register work which needs to performed on module loading. Mainly used in routing.

ngRoute ($routeProvider):
	- module routes to different HTML template without reloading the page.
	- The page can contain only single ng-view.
	- you can't relate child and parent.
	- you can't hide and show different parts of view based on URL.
	$routeProvider
    .when("/", {
        templateUrl : "main.htm"
    })
ui-router($stateProvider):
	- Module routes to different HTML templeates without reloading the page.
	- The page can contain multiple ng-view.
	- You can relate child and parent.
	- You can hide and show different parts of view based in URL.
	- header, content, footer.
	- ui-sref
	
	$stateProvider.state('myteam', {
    	 url: '/myteam',
		templateUrl : 'content/html/admin-dashboard.html'
	})
	
$http is an AngularJS service for reading data from remote servers.

promise - A service that helps to run functions asynchronously and use their return values or exceptions when they done with processing.

promise = $http.get("api/api1");
promise.then(function(payload))
{
	$scope.movieContent = payload.data;
});

$broadcast - dispatches event downwards to all child scopes.
	function firstCtrl($scope)
	{
		$scope.$broadcast('someEvent', [1,2,3]);
	}

	function secondCtrl($scope)
	{
		$scope.$on('someEvent', function(event, mass) { console.log(mass); });
	}

$emit - dispatches event upwards to parent scopes.
	function firstCtrl($scope)
	{
		$scope.$on('someEvent', function(event, data) { console.log(data); });
	}

	function secondCtrl($scope)
	{
		$scope.$emit('someEvent', [1,2,3]);
	}

Shadow DOM - Allows us to hide DOM logic bebind other elements. <input type="date"> - How this brings date picker? <input id="foo" type="range"> - How is brings the slider?

Scope
RootScope
IsolatedScope
Directives
Watches
Emitters
Shadow DOM
AngularJS Pagination
ES6

angular.equals is used to determine the equality of the two expressions while angular.copy is used to store the value of current value of a watchExpression for later comparison.


AngularJS 2.0:
ECMAScript 6
Annotation driven
dependency injection
Generics can be used